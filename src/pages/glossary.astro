---
import Layout from '../layouts/Layout.astro';
import { glossaryCategories, glossaryEntries } from '../data/glossary';
---

<Layout title="Astrology Glossary - AstroGlossary" description="Comprehensive astrology glossary with terms, definitions, and cross-references">
  <div class="bg-white py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-gray-900 mb-4">
          Astrology Glossary
        </h1>
        <p class="text-xl text-gray-600 max-w-3xl mx-auto">
          Explore comprehensive definitions, cross-references, and examples 
          for hundreds of astrological terms.
        </p>
      </div>

      <!-- Search Bar -->
      <div class="mb-8">
        <div class="max-w-md mx-auto">
          <input
            type="text"
            id="search-input"
            placeholder="Search terms..."
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
          />
        </div>
      </div>

      <!-- Categories -->
      <div class="mb-12">
        <h2 class="text-2xl font-semibold mb-6">Browse by Category</h2>
        <div class="grid md:grid-cols-3 lg:grid-cols-5 gap-4">
          {glossaryCategories.map(category => (
            <a
              href={`#category-${category.id}`}
              class="p-4 rounded-lg border border-gray-200 hover:shadow-md transition-shadow text-center"
            >
              <div class={`w-12 h-12 ${category.color} rounded-full mx-auto mb-2`}></div>
              <h3 class="font-medium text-gray-900">{category.name}</h3>
              <p class="text-sm text-gray-600 mt-1">{category.description}</p>
            </a>
          ))}
        </div>
      </div>

      <!-- Glossary Entries -->
      <div id="glossary-entries">
        {glossaryCategories.map(category => {
          const categoryEntries = glossaryEntries.filter(entry => entry.category === category.id);
          return (
            <div id={`category-${category.id}`} class="mb-12">
              <h2 class="text-3xl font-bold text-gray-900 mb-6 border-b border-gray-200 pb-2">
                {category.name}
              </h2>
              <div class="grid gap-6">
                {categoryEntries.map(entry => (
                  <div 
                    id={`entry-${entry.id}`}
                    class="entry-card bg-gray-50 rounded-lg p-6 hover:shadow-md transition-shadow"
                    data-term={entry.term.toLowerCase()}
                    data-definition={entry.definition.toLowerCase()}
                    data-tags={entry.tags?.join(' ').toLowerCase() || ''}
                  >
                    <h3 class="text-xl font-semibold text-primary-600 mb-3">
                      {entry.term}
                    </h3>
                    <p class="text-gray-700 mb-4 leading-relaxed">
                      {entry.definition}
                    </p>
                    
                    {entry.etymology && (
                      <div class="mb-3">
                        <span class="text-sm font-medium text-gray-500">Etymology:</span>
                        <span class="text-sm text-gray-600 ml-2">{entry.etymology}</span>
                      </div>
                    )}
                    
                    {entry.examples && entry.examples.length > 0 && (
                      <div class="mb-3">
                        <span class="text-sm font-medium text-gray-500 block mb-1">Examples:</span>
                        <ul class="text-sm text-gray-600 ml-4">
                          {entry.examples.map(example => (
                            <li class="list-disc">{example}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                    
                    {entry.relatedTerms && entry.relatedTerms.length > 0 && (
                      <div class="mb-3">
                        <span class="text-sm font-medium text-gray-500">Related Terms:</span>
                        <div class="flex flex-wrap gap-2 mt-1">
                          {entry.relatedTerms.map(termId => (
                            <a 
                              href={`#entry-${termId}`}
                              class="text-xs bg-primary-100 text-primary-800 px-2 py-1 rounded hover:bg-primary-200 transition-colors"
                            >
                              {termId.replace('-', ' ')}
                            </a>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {entry.tags && entry.tags.length > 0 && (
                      <div class="flex flex-wrap gap-1">
                        {entry.tags.map(tag => (
                          <span class="text-xs bg-gray-200 text-gray-700 px-2 py-1 rounded">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  </div>
</Layout>

<script>
  // Search functionality
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const entryCards = document.querySelectorAll('.entry-card') as NodeListOf<HTMLElement>;

  searchInput?.addEventListener('input', (e) => {
    const query = (e.target as HTMLInputElement).value.toLowerCase();
    
    entryCards.forEach(card => {
      const term = card.dataset.term || '';
      const definition = card.dataset.definition || '';
      const tags = card.dataset.tags || '';
      
      const matches = term.includes(query) || 
                     definition.includes(query) || 
                     tags.includes(query);
      
      card.style.display = matches || query === '' ? 'block' : 'none';
    });
  });

  // Smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const href = (e.target as HTMLAnchorElement).getAttribute('href');
      if (href) {
        const target = document.querySelector(href);
        target?.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    });
  });
</script>